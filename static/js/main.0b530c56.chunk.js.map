{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["styled","TextField","input","color","borderColor","App","useState","modalOpen","setModalOpen","React","salary","setSalary","errorMessage","serErrorMessage","openlist","setOpenList","StyledTextField","border","borderRadius","borderWidth","outline","handleOpen","handleChangeSalary","useCallback","event","preventDefault","target","value","console","log","className","Button","onClick","Modal","open","onClose","Box","FormControl","error","autoFocus","required","variant","placeholder","id","onChange","type","FormHelperText","procent","Number","payForYear","lastYearPay","years","isInteger","integer","Math","floor","trunc","countPay","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b530c56.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react';\n\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\n\nimport Button from '@mui/material/Button';\n\nimport { makeStyles, styled } from '@material-ui/styles';\nimport FormControl from '@mui/material/FormControl';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport { TextField } from '@mui/material';\n\nimport './App.scss';\n\nconst useStyles = styled(TextField)({\n  input: { \n      '&input': {\n      color: 'red',\n      borderColor: 'red',\n      }\n  }\n});\n\nfunction App() {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [salary, setSalary] = React.useState('');\n  const [errorMessage, serErrorMessage] = useState(false);\n  const [expanded, setExpanded] = React.useState<string | false>(false);\n  const [openlist, setOpenList] = useState(false);\n\n  const StyledTextField = styled(TextField)({\n    '&input': {\n      border: \"1px solid #DFE3E6\",\n      borderRadius: 3, \n    },\n    '&.Mui-error': {\n      borderColor: 'red',\n      borderWidth: 1,\n      borderRadius: 3, \n    },\n    '& input:focus + fieldset': {\n      border: \"1px solid #DFE3E6\", \n    },\n    '& .MuiOutlinedInput-root': {\n      '&:focus-within': {\n        borderColor: '#DFE3E6',\n      },\n      '&:hover fieldset': {\n        borderColor: 'black',\n        border: '1px solid',\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: 'black',\n        borderWidth: 1,\n        outline: 'none',\n      },\n    },\n  });\n  \n\n  const classes = useStyles\n\n  const handleOpen = () => {\n    setModalOpen(!modalOpen);\n    setSalary('');\n    setOpenList(false);\n  };\n\n  const countPay = () => {\n    const userSalary = Number(salary) \n    const procent = (userSalary * 12) * 0.13;\n    let payForYear = 0\n    let lastYearPay = 0\n    if (procent >= 260000) {\n      return (\n        payForYear += 260000\n      )\n    } else {\n      let years = 260000 / procent\n      if (Number.isInteger(years)) {\n        return (\n          (payForYear += procent )*years\n        )\n      } else {\n        const integer = Math.floor(years);\n        const balance = years % 1;\n        const lastProcent = procent * balance;\n        return (\n          Math.trunc((lastYearPay += procent) * integer)\n          // (lastPay += lastProcent )\n        )\n      }\n    }\n  }\n\n  const isOpen = () => {\n    if (salary) {\n      setOpenList(!openlist);\n      countPay()\n    } else {\n      serErrorMessage(true);\n    };\n    \n  }\n\n  const handleChangeSalary = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    setSalary(event.target.value);\n    serErrorMessage(false);\n  },[setSalary]); \n\n  const style = {\n    position: 'absolute' as 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: \"100%\",\n    bgcolor: '#fff',\n    borderRadius: \"30px\",\n    boxSizing: 'border-box',\n    boxShadow: 24,\n    pt: 4,\n    px: 4,\n    pb: 4,\n  };//Модалка\n\n  console.log(salary)\n\n  return (\n    <div className={`${modalOpen ? \"white-bg\" : ''} App`}> \n      <Button onClick={handleOpen} className=\"modal-button\">Налоговый вычет</Button>\n      <Modal\n        open={modalOpen}\n        onClose={handleOpen}\n        aria-labelledby=\"parent-modal-title\"\n        aria-describedby=\"parent-modal-description\"\n        className=\"modal-window\"\n      >\n        <Box className=\"box\">\n          <button className=\"close\" onClick={handleOpen}></button>\n          <h2 className=\"modal-window-title\">Налоговый вычет</h2>\n          <p className=\"modal-window-text\">\n            Используйте налоговый вычет чтобы погасить ипотеку досрочно. Размер налогового вычета составляет не более 13% от своего официального годового дохода.\n          </p>\n          <div className=\"modal-window-counter\">\n            <p className=\"title\">Ваша зарплата в месяц</p>\n            <FormControl error={errorMessage} className=\"input-window\"> \n              <StyledTextField\n                autoFocus={true}\n                error={errorMessage}\n                required\n                variant=\"outlined\"\n                placeholder=\"Введите данные\"\n                id=\"component-outlined\"\n                className=\"input\"\n                value={salary}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleChangeSalary(event)}\n                type='number'\n              />\n              {errorMessage\n                ? <FormHelperText id=\"component-error-text\">Поле обязательно для заполнения</FormHelperText>\n                :\"\"\n              }\n            </FormControl>\n          </div>\n          <div className=\"modal-window-accordion\">\n            <div className=\"count\" onClick={isOpen}>\n              Рассчитать\n            </div>\n            <div className={`count-items ${openlist && !errorMessage ? 'open' : ''}`}>\n              <div className=\"title\">Итого можете внести в качестве досрочных:</div>\n              <div className=\"items\">\n                <div className=\"each-item\"> \n                  <input className=\"check\" type=\"checkbox\" id=\"1\"/>\n                  <label className=\"label\" >26 000 рублей <div className=\"year\">в 4-ый год</div></label>\n                </div>\n              </div>\n              <div className=\"items\">\n                <div className=\"each-item\"> \n                  <input className=\"check\" type=\"checkbox\" id=\"1\"/>\n                  <label className=\"label\" >26 000 рублей <div className=\"year\">в 4-ый год</div></label>\n                </div>\n              </div>\n              <div className=\"items\">\n                <div className=\"each-item\"> \n                  <input className=\"check\" type=\"checkbox\" id=\"1\"/>\n                  <label className=\"label\" >26 000 рублей <div className=\"year\">в 4-ый год</div></label>\n                </div>\n              </div>\n              <div className=\"items\">\n                <div className=\"each-item\"> \n                  <input className=\"check\" type=\"checkbox\" id=\"1\"/>\n                  <label className=\"label\" >26 000 рублей <div className=\"year\">в 4-ый год</div></label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"choise\">\n            <div className=\"title\">Что уменьшаем?</div>\n            <div className=\"radio\">\n              <button className=\"radio-button\">Платёж</button>\n              <button className=\"radio-button\" disabled={true}>Срок</button>\n            </div> \n          </div>\n          <button className=\"submitBtn\" disabled={!openlist} onClick={handleOpen}>Добавить</button>\n        </Box>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}